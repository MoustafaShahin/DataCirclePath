library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
allTables
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
\
head(affyData)
query<-dbSendQuery(hg19,"select * from affyU133Plus2"where misMatches between 1 and 3")
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
query<-dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis<-fetch(query);quantile(affyMis$misMatches)
affyMisSmall<-fetch(query,n=10);dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
library(rhdf5)
created=h5createFile("example.h5")
created
created=h5createGroup("example.h5","foo")
created=h5createGroup("example.h5","baa")
created=h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B=array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
?seq
attr(B,"Scale")<-"liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
?seq
df=data.frame(1L:5L,seq(0,1,length.out = 5),c("ab,"cde","fghi","a","s"),stringAsFactors=FALSE)
df=data.frame(1L:5L,seq(0,1,length.out = 5),c("ab","cde","fghi","a","s"),stringAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("examole.h5")
h5ls("example.h5")
readA=h5read("example.h5","foo/A")
readB=h5read("example.h5","foo/foobaa/B")
readdf=h5read("example.h5","df")
readA
readB
readdf
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3))
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,3))
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con=url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
temp<-getURL(url )
html<-htmlTreeParse(temp,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
html
xpathSApply(html,"//title",xmlValue)
html<-htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
library(httr);html2=GET(url)
content2=content(html2,as="text")
parsedHtml=htmlParse(content2,asText = TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
library(httr)
class(c(4,"a",TRUE))
utils:::menuInstallPkgs()
q()
g
l
x<-5
x
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
sample(1:5)
x
x<-x[sample(1:5),];x$var2[c(1,3)]=NA
x
x[,1]
x[,"var1"]
x[1:2,"var2"]
x[order(x$var1),]
library(plyr)
install.packages("plyr")
library(plyr)
arrange(x,var1)
arrange(x,var3)
arrange(x,desc(var1))
x$var4<-rnorm
x$var4<-rnorm(5)
x
y<-cbind(x,"var5"=rnorm(5))
y
url<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(url,dedtfile="rest.csv",method="curl")
download.file(url,destfile="rest.csv",method="curl")
redtdata<-read.csv("rest.csv")
redtdata
head(restdata,n=3)
restdata<-read.csv("rest.csv")
head(restdata,n=3)
tail(restdata,n=3)
summary(restdata)
str(restdata)
quantile(restdata$councilDistrict)
quantile(restdata$councilDistrict,na.rm=T)
quantile(restdata$councilDistrict,probs = c(0.5,0.75,0.9))
restdata$councilDistrict
?table
table(restdata$zipCode)
table(restdata$zipCode,useNA = "ifany")
table(restdata$councilDistrict,restdata$zipCode)
table(restdata$zipCode %in% c("21212"))
table(restdata$zipCode %in% c("21212","212123"))
table(restdata$zipCode %in% c("21212","21213"))
restdata$zipCode %in% c("21212","21213")
restdata[restdata$zipCode %in% c("21212","21213"),]
data("UCBAdmissions")
DF=as.data.frame(UCBAdmissions)
DF
summary(DF)
xt<-xtabs(Freq~Gender+Admit,data=DF)
xt
xt<-xtabs(Freq~Gender+Admito,data=DF)
data("warpbreaks")
warpbreaks
warpbreaks$replicate<-rep(1:9,len=54)
warpbreaks
xt<-xtabs(breaks~.,data=warpbreaks)
xt
ftable(xt)
url1= "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
url1= "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
url1= "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
url2= "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(url1,destfile = "rev.csv",method="curl")
download.file(url1,destfile = "rev.csv")
url1= "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
download.file(url1,destfile = "rev.csv")
download.file(url1,destfile = "rev.csv",method="curl")
download.file(url2,destfile = "sol.csv",method="curl")
reviews=read.csv("rev.csv");solutions=read.csv("sol.csv")
head(reviews)
head(solutions)
library(swirl)
swirl()
mydf=read.csv("path2csv.csv",stringsAsFactors = F)
mydf=read.csv("path2.csv",stringsAsFactors = F)
mydf=read.csv(path2csv,stringsAsFactors = F)
mydf=read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tb1_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country,r_arch)
select(cran,country:r_arch)
cran
select(cram,-time)
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(x:size))
select(cran,-x:size)
x
select(cran, -(X:size))
filter(cran,package="swirl")
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<"3.0.2"&country=="India")
filter(cran,r_version<="3.0.2"&country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country="US" |country=="IN")
filter(cran,country=="US" |country=="IN")
filter(cran,size>100500 AND r_os=="linux-gnu")
filter(cran,size > 100500 & r_os=="linux-gnu")
filter(cran,size > 100500 , r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2=select(cran,size:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size=size-1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
submit()
submit()
submit()
pack
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
view(top_unique_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count())
gather(students,sex,count,-grade
)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?seperate
?separate
separate(res,sex,class)
separate(data=res,into=c("sex","class"))
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
students3
?gather
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
filed
failed
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed<-failed%>%mutate(status="failed")
?bimd_rows
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url,destfile = "quiz3")
q<-read.csv("quiz3.csv")
q<-read.csv("quiz3")
q
q$AGS
q[which(q$AGS ==6)]
q[which(q$AGS ==6),]
q[which(q$AGS >=6),]
q[which(q$AGS >=6&q$ACR==3),]
library(jpeg)
x<-readJPEG()
x<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native = T)
?readJPEG
x<-readJPEG("getdata%2Fjeff.jpg",native = T)
x
quantile(x,probs = c(.30,.8))
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
gro<-read.csv(download.file(url1,destfile="gro.csv"));edu<-read.csv(download.file(url2,destfile = "edu.csv"))
gro<-read.csv(download.file(url1,destfile="gro.csv"))
gro<-read.csv("gro.csv")
download.file(url2,destfile = "edu.csv")
edu<-read.csv("edu.csv")
str(edu)
str(gro)
edu$CountryCode ==gro$X
edu$CountryCode
gro$X
merg1<-merge(gro,edu,by.x="X",by.y = "CountryCode",all=T)
head(merg1)
merg1
arrange(merg1,desc(GDP))
arrange(merg1,desc(ranking))
arrange(merg1,desc(Gross.domestic.product.2012))
tail(arrange(merg1,desc(Gross.domestic.product.2012)))
df<-tbl_df(merg1)
df
arrange(df,desc(Gross.domestic.product.2012))
x<-arrange(df,desc(Gross.domestic.product.2012))
x[1]
x[13,]
View(x[13,])
View(x$Income.Group[13,])
?fread
library(data.table)
?fread
gro<-read.csv("gro.csv")
?read.csv
fread("gro.csv")
library(data.table)
fread("gro.csv")
fread("gro.csv",skip=4)
?fread
read.csv("gro.csv")
read.csv("gro.csv")
gg<-fread("gro.csv",skip=4,select = c(1,2,4,5),nrows = 190)
gg<-data.table::fread("gro.csv",skip=4,select = c(1,2,4,5),nrows = 190)
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv' , skip=4, nrows = 190, select = c(1, 2, 4, 5) , col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FGDP
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
FEDSTATS_Country
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
nrow(mergedDT)
arrange(mergedDT,desc(economy))
library(dplyr)
arrange(mergedDT,desc(economy))
mergedDT
arrange(mergedDT,desc(Rank))
?lapply
View(mergedDT)
mergedDT['Income Group'="High income : OCED",lapply(.SD,mean),.SDcols=c("Rank"),by="Income Group"]
mergedDT["Income Group"="High income : OCED",lapply(.SD,mean),.SDcols=c("Rank"),by="Income Group"]
mergedDT["Income Group"=="High income : OCED",lapply(.SD,mean),.SDcols=c("Rank"),by="Income Group"]
mergedDT[`Income Group` == "High income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "low income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "Low income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "How income: NonOECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "How income: nonOECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "High income: nonOECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
library(plyr)
quantile(mergedDT$Rank,g=4)
cut2(mergedDT$Rank,g=5)
library(Hmisc)
cut2(mergedDT$Rank,g=5)
table(mergedDT$Income Group,cut2(mergedDT$Rank,g=5))
table(mergedDT$`Income Group`,cut2(mergedDT$Rank,g=5))
summarize(mergedDT$`Income Group`)
summarize(mergedDT$`Income Group`,mean)
summarize(mergedD,gg=mean(Group Income))
summarize(mergedDT,gg=mean(Group Income))
mean(subset(mergedDT,"Group Income"=="High income :  OCED"))
mean(subset(mergedDT,"Group Income"=="High income :  OCED"),na.rm = T)
mean(subset(mergedDT,"Group.Income"=="High income :  OCED"),na.rm = T)
View(read.csv("train.csv"))
cameradata<-read.csv("cameras.csv")
names(cameradata)
tolower(names(cameradata))
names(cameradata)
splitnames<-strsplit(names(cameradata),"\\.")
splitnames
ml<-list(letters=c("A","B","C"),numbers=1:3,matrix(1:25,ncol=5))
ml
ml[1]
ml[[1]]
splitnames[[6]][1]
firstelement<-function(x){x[1]}
sapply(splitnames,firstelement)
rev<-read.csv("reviews.csv")
rev<-read.csv("rev.csv")
sol<-read.csv("sol.csv")
head(rev,2)
grep("Alameda",cameradata$intersection)
table(grepl("Alameda",cameradata$intersection))
cameradata2<-cameradata[!grepl("Alameda",cameradata$intersection)]
cameradata2<-cameradata[!grepl("Alameda",cameradata$intersection),]
cameradata2
grep("Alameda",cameradata$intersection,value=T)
grep("jeffstreet",cameradata$intersection,value=T)
library(stringr)
nchar("Jeffery Leek")
substr("Jeffery Leek",1,7)
paste("Jeffery","Leek")
^i think
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile = "quiz.csv")
xx<-read.csv("quiz.csv")
names(xx)
st<-strsplit(names(xx),^wgtp)
st<-strsplit(names(xx),"^wgtp")
st
gro<-read.csv("gro.csv")
head(gro,n=1)
View(gro)
library(data.table)
gro<-data.table::fread("gro.csv",skip = 4,select = 5)
gro<-data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip = 4,select = 5)
gro
mean(gro)
mean(gro,na.rm=T)
mean(grep("^[1-9]",gro,value = T),na.rm=T)
grep("^[1-9]",gro,value = T)
grep("[1-9]",gro,value = T)
gro<-gsub(",","",gro)
gro<-data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip = 4,select = 5)
gro<-gsub(",","",gro)
gro<-data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip = 4,select = 5)
gro<-sub(",","",gro)
gro<-data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip = 4,select = 5)
gro<-subset(gro,gro$V5=="^[1-9]")
gro<-data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip = 4,select = 5)
read.csv("gro.csv")
gro<-read.csv("gro.csv")
gro<-gsub(",","",gro[,5])
mean(as.numeric(gro[1:215]),na.rm = TRUE)
grep(“^United”,countryNames)
grep(“^United”,gro$X.2)
grep(“^United”,gro[,1])
grep("^United",gro$X.2)
grep("^United",gro[,4])
setwd("~/Titanic")
?aes
??aes
library(ggplot2)
?aes
install.packages("pander")
install.packages("pander")
install.packages("pROC")
install.packages("caret")
train<-read.csv("train.csv",stringsAsFactors = F)
test<-read.csv("test.csv",stringsAsFactors = F)
full<-rbind(train,test)
temp.data<-train[!is.na(train$Age),]
temp.data$Child<-temp.data$Age<16
temp.data<-train[!is.na(train$Age),]
temp.data$Child<-temp.data$Age<16
table(temp.data$Child)
summary(full)
test$Survived<-NA
train$IsTrain<-TRUE
test$IsTrain<-FALSE
full<-rbind(train,test)
summary(full)
agemedian<-median(full,na.rm = TRUE)
agemedian<-median(full$Age,na.rm = TRUE)
agemeduan
agemedian
table(full$Embarked)
str(full)
?plot
